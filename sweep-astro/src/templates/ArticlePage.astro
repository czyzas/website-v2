---
import type {
  AuthorFragment,
  CaseStudyCardFragment,
  CaseStudySinglePageQuery,
  EventListItemFragment,
  EventSinglePageQuery,
  InsightsListItemFragment,
  InsightsSinglePageQuery,
  NewsroomListItemFragment,
  NewsroomSinglePageQuery,
} from '@/__generated__/cms';

import ArticleBar from '@/components/ArticleBar.astro';
import ArticlesGrid from '@/components/ArticlesGrid.astro';
import CardWithMergedImage from '@/components/CardWithMergedImage.astro';
import CustomerLogo from '@/components/CustomerLogo.astro';
import EventInformation from '@/components/EventInformation.astro';
import ModulesIncluder from '@/components/ModulesIncluder.astro';
import Form from '@/components/hubspot-form/Form.astro';
import FormContainer from '@/components/hubspot-form/FormContainer.astro';
import SectionTitle from '@/components/partials/SectionTitle.astro';
import Top from '@/components/partials/Top.astro';
import Sidebar from '@/components/sidebar/Sidebar.astro';
import SidebarCardAuthor from '@/components/sidebar/SidebarCardAuthor.astro';
import SidebarCardTableOfContents from '@/components/sidebar/SidebarCardTableOfContents.astro';
import SidebarEventCTA from '@/components/sidebar/SidebarEventCTA.astro';
import Container from '@/components/ui/Container.astro';
import Grid from '@/components/ui/Grid.astro';
import Link from '@/components/ui/Link.astro';
import Section from '@/components/ui/Section.astro';
import { TRANSLATIONS } from '@/constants';
import { buildI18nPath, getLocale } from '@/i18n/utils';
import Layout from '@/layouts/Layout.astro';
import { buildTOC } from '@/scripts/buildTOC';
import { cn } from '@/scripts/cn';
import { parseCaseStudyCustomer } from '@/scripts/data-parsers/parseCaseStudies';
import { parseLink } from '@/scripts/data-parsers/parseLink';
import type { UnparsedLink } from '@/scripts/data-parsers/parseLink';
import { parseSectionTitle } from '@/scripts/data-parsers/parseSectionTitle';
import { parseTags } from '@/scripts/data-parsers/parseTag';
import { getDefaultTopImage } from '@/scripts/postTypeOptions';
import { overwriteWYSIWYGContent } from '@/scripts/overwriteWYSIWYGContent';
import { initializeStore } from '@/scripts/store';
import { cmsStore } from '@/stores/cmsStore';
import type { ColumnSizes, PageTranslations, WithShouldRender } from '@/types';
import { cleanArray } from '@/scripts/cleanArray';
import { languageStore } from '@/stores/languageStore';
import SidebarFile from '@/components/sidebar/SidebarFile.astro';
import { parseFile } from '@/scripts/data-parsers/parseFile';
import type { ParsedFile } from '@/scripts/data-parsers/parseFile';

type InsightsSingleProps = {
  postType: 'insights';
  data: InsightsSinglePageQuery;
};
type NewsroomSingleProps = {
  postType: 'newsroom';
  data: NewsroomSinglePageQuery;
};
type EventSingleProps = {
  postType: 'event';
  data: EventSinglePageQuery;
};
type CaseStudySingleProps = {
  postType: 'case-study';
  data: CaseStudySinglePageQuery;
};
interface ArticlePageProps {
  lang: string;
}
type Props = (
  | InsightsSingleProps
  | NewsroomSingleProps
  | EventSingleProps
  | CaseStudySingleProps
) &
  ArticlePageProps;

const { postType, data, lang } = Astro.props;

const page = data.page!;

initializeStore(cmsStore, {
  uri: page.uri,
  primaryMenu: data.primaryMenu!,
  themeOptions: data.themeOptionsByLang!,
  subpageSettings: data.page?.subpageSettings,
  seo: page?.seo,
});
initializeStore(languageStore, {
  currentLanguage: data.page!.language!,
  languages: data.languages,
  translations: cleanArray(data.page?.translations as PageTranslations),
});

overwriteWYSIWYGContent(page.modules?.modulesContent, {
  RICH_TEXT_CONTENT_HEADINGS_IDS: true,
});

const { subpageSettings } = page;
const pageTitle = page?.title ?? '';
// TODO: fix type
let title = subpageSettings?.customTitle || pageTitle || '';
const introduction = subpageSettings?.introduction || '';
const image = subpageSettings?.image;
const size = (subpageSettings?.topDistribution ?? '5-7') as ColumnSizes;
const category =
  page.__typename === 'CaseStudy'
    ? TRANSLATIONS.CUSTOMER
    : page.categories?.nodes?.[0]?.name;
const tags = parseTags(page.tags?.nodes);
const toc = buildTOC(page.modules?.modulesContent);
let lastUpdated: string | undefined;
let author: AuthorFragment | undefined;
let attachment: WithShouldRender<ParsedFile> | undefined;

if (
  (page.__typename === 'InsightsItem' || page.__typename === 'NewsroomItem') &&
  page.articleAcf?.author?.node.__typename === 'PostAuthor'
) {
  author = page.articleAcf.author.node;
}

if (page.__typename === 'InsightsItem') {
  attachment = parseFile(page?.insightsItemAcf?.attachment?.node);
}

if ('modified' in page && page.modified) {
  lastUpdated = new Date(page.modified).toLocaleDateString(getLocale(lang), {
    day: '2-digit',
    month: 'long',
    year: 'numeric',
  });
}

const nodes = data?.articles?.nodes;
const posts = cleanArray(
  nodes as (
    | InsightsListItemFragment
    | NewsroomListItemFragment
    | EventListItemFragment
    | CaseStudyCardFragment
  )[]
)
  .filter((post) => post.uri !== data.page?.uri)
  .slice(0, 3);

let postsTitle = '';
switch (postType) {
  case 'event':
    postsTitle = TRANSLATIONS.ARTICLE.MORE_EVENTS;
    break;
  case 'case-study':
    postsTitle = TRANSLATIONS.ARTICLE.MORE_CUSTOMER_STORIES;
    break;
  case 'insights':
  case 'newsroom':
  default:
    postsTitle = TRANSLATIONS.ARTICLE.MORE_STORIES;
    break;
}

let registerFormTitle;
if (page.__typename === 'Event') {
  registerFormTitle = page.eventAcf?.registerFormTitle?.selectSectionTitle;
}

let caseStudyDetails: {
  label: string;
  value: UnparsedLink | string | number;
}[] = [];
if (page.__typename === 'CaseStudy') {
  const customer = parseCaseStudyCustomer(page);
  const longerTitle = page.caseStudyAcf?.longerTitle;
  title = longerTitle || customer?.title || '';
  caseStudyDetails = [
    {
      label: 'company',
      value: subpageSettings?.customTitle || pageTitle || '',
    },
    { label: 'size', value: customer?.customerAcf?.size },
    { label: 'industry', value: customer?.customerAcf?.category },
    { label: 'headquarters', value: customer?.customerAcf?.headquarters },
    { label: 'website', value: customer?.customerAcf?.websiteLink },
  ].filter((entry) => entry.value);
}
---

<Layout
  name={postType}
  pageTitle={pageTitle}
  htmlClassName="scroll-smooth scroll-p-24"
>
  <Top
    overline={cn({ [TRANSLATIONS.EVENT]: page.__typename === 'Event' })}
    title={title}
    titleSize="h2"
    content={introduction}
    image={page.__typename !== 'CaseStudy' ? image : undefined}
    size={size}
    class="py-8 md:pb-14 md:pt-18"
  >
    {
      page.__typename === 'Event' && (
        <Fragment slot="details">
          <EventInformation
            location={page.eventAcf?.eventLocation}
            date={page.eventAcf?.eventDate}
            language={page.eventAcf?.eventLanguage}
          />
        </Fragment>
      )
    }
    {
      page.__typename === 'CaseStudy' && (
        <Container class="mt-4 md:mt-10">
          <CardWithMergedImage
            image={image || getDefaultTopImage(page.__typename)}
            size="lg"
          >
            <CustomerLogo
              logo={parseCaseStudyCustomer(page)?.customerAcf?.logo}
            />
            {caseStudyDetails.length > 0 && (
              <div class="details flex flex-col gap-3">
                {caseStudyDetails.map(({ label, value }) => {
                  const link =
                    typeof value === 'object' ? parseLink(value) : undefined;
                  if (link && !link.shouldRender) return null;

                  return (
                    <div>
                      <div class="typography-small-box-title uppercase text-sw-text-subdued">
                        {label}
                      </div>
                      <div class="typography-body text-black">
                        {link ? (
                          <Link to={link.url} external>
                            {link.title}
                          </Link>
                        ) : (
                          value
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            )}
          </CardWithMergedImage>
        </Container>
      )
    }
    <ArticleBar
      details={{
        Category: category,
        'Last updated': lastUpdated,
      }}
      tags={tags}
      sharing
      class="mt-8 md:mt-12"
    />
  </Top>
  <Section bg="white" class="pt-0 md:pt-0">
    <Container>
      <Grid class="gap-y-8">
        <div
          class="order-2 col-span-full flex flex-col gap-8 md:order-1 md:col-start-1 md:col-end-9 md:gap-14 lg:col-start-2"
        >
          <ModulesIncluder category="article" data={page?.modules} />
        </div>
        <Sidebar
          sticky
          class="order-1 col-span-full md:order-2 md:col-start-9 md:col-end-13 lg:col-start-10"
        >
          <SidebarCardAuthor author={author} />
          {
            page.__typename === 'InsightsItem' &&
              !!attachment &&
              attachment.shouldRender && (
                <SidebarFile
                  title={page.insightsItemAcf?.attachmentSidebarTitle}
                  href={attachment.url}
                />
              )
          }
          {
            (
              [
                'InsightsItem',
                'NewsroomItem',
                'CaseStudy',
              ] as (typeof page.__typename)[]
            ).includes(page.__typename) && (
              <SidebarCardTableOfContents toc={toc} />
            )
          }
          {
            page.__typename === 'Event' && (
              <SidebarEventCTA location={page.eventAcf?.eventLocation} />
            )
          }
        </Sidebar>
      </Grid>
    </Container>
  </Section>
  {
    page.__typename === 'Event' && page.eventAcf?.registerFormGuid && (
      <Section bg="surface-subdued">
        <Container>
          <SectionTitle withMargin {...parseSectionTitle(registerFormTitle)} />
          <FormContainer>
            <Form formGuid={page.eventAcf?.registerFormGuid} />
          </FormContainer>
        </Container>
      </Section>
    )
  }
  {
    posts.length > 0 && (
      <Section bg="surface-background">
        <Container>
          <SectionTitle withMargin headline={postsTitle} />
          <ArticlesGrid
            postType={postType}
            posts={posts}
            cta={
              page.__typename === 'CaseStudy'
                ? {
                    url: buildI18nPath('/customers', lang),
                    title: TRANSLATIONS.LOAD_MORE,
                  }
                : undefined
            }
          />
        </Container>
      </Section>
    )
  }
</Layout>
