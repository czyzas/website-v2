---
import type { ModulesModulesContentTabsLayout } from '@/__generated__/cms';
import ButtonContainer from '@/components/ButtonContainer.astro';
import CardWithBigImage from '@/components/CardWithBigImage.astro';
import CardWithImageSpaced from '@/components/CardWithImageSpaced.astro';
import CardWithSideImage from '@/components/CardWithSideImage.astro';
import ModuleContainer from '@/components/ModuleContainer.astro';
import WordpressButtonLink from '@/components/WordpressButtonLink.astro';
import WordpressImage from '@/components/WordpressImage.astro';
import Prose from '@/components/ui/Prose.astro';
import TabList from '@/components/ui/Tabs/TabList.astro';
import TabListItem from '@/components/ui/Tabs/TabListItem.astro';
import TabPane from '@/components/ui/Tabs/TabPane.astro';
import UITabs from '@/components/ui/Tabs/Tabs.astro';
import { cn } from '@/scripts/cn';
import { linkShouldRender } from '@/scripts/data-parsers/parseLink';
import { fixDoubleBr } from '@/scripts/fixDoubleBr';
import CardWithMergedImage from '@/components/CardWithMergedImage.astro';
import type { WithModuleMeta } from '@/types';

type Props = WithModuleMeta<ModulesModulesContentTabsLayout>;

const {
  __meta__,
  layoutName,
  backgroundColor,
  contentLayout,
  tabsLook,
  ctaButton,
  tabs,
} = Astro.props;
const tabId = crypto.randomUUID();
const layout = contentLayout ?? 'side';

const titleSizes: Record<string, string> = {
  smaller: 'typography-cards-bold-large',
  default: 'typography-h3',
  bigger: 'typography-h2',
} as const;

type CardLayout = 'side' | 'overlapping' | 'spaced' | 'merged';

const layouts = {
  side: CardWithSideImage,
  overlapping: CardWithBigImage,
  spaced: CardWithImageSpaced,
  merged: CardWithMergedImage,
} as const;

const ContentWrapper =
  layout in layouts ? layouts[layout as CardLayout] : layouts.side;
---

{
  tabs && tabs.length > 0 ? (
    <ModuleContainer meta={__meta__} name={layoutName!} bg={backgroundColor}>
      <UITabs>
        {tabs.length > 1 && (
          <TabList class="mb-10">
            {tabs.map((tab, tabIndex) => (
              <TabListItem
                counter={tabsLook === 'ordered'}
                underline={tabsLook === 'ordered'}
                isActive={tabIndex === 0}
                id={`${tabId}-${tabIndex}`}
                class={cn({ 'min-w-52': tabsLook === 'ordered' })}
              >
                <Fragment set:html={fixDoubleBr(tab?.tabTitle)} />
              </TabListItem>
            ))}
          </TabList>
        )}
        <div class="tab-content">
          {tabs.map((tab, tabIndex) => {
            const titleSizeValue = tab?.titleSize ?? 'default';
            const titleSize = titleSizes[titleSizeValue] ?? titleSizes.default;
            return (
              <TabPane isActive={tabIndex === 0} id={`${tabId}-${tabIndex}`}>
                <ContentWrapper image={tab?.image}>
                  {(!!tab?.overline || !!tab?.overlineIcon) && (
                    <p class="overline-container item-scenter mb-2 flex gap-1">
                      <WordpressImage
                        data={tab?.overlineIcon}
                        class="h-11 object-contain"
                      />
                      {!!tab.overline && (
                        <span class="typography-subhead">{tab.overline}</span>
                      )}
                    </p>
                  )}
                  {!!tab?.title && (
                    <h3
                      class={cn(titleSize, 'max-w-96')}
                      set:html={fixDoubleBr(tab.title)}
                    />
                  )}
                  {!!tab?.content && (
                    <Prose class="mt-[1.125rem]" set:html={tab?.content} />
                  )}
                  {linkShouldRender(tab?.ctaButton) && (
                    <div class="mt-auto pt-4">
                      <WordpressButtonLink data={tab?.ctaButton} arrow />
                    </div>
                  )}
                </ContentWrapper>
              </TabPane>
            );
          })}
        </div>
      </UITabs>
      {linkShouldRender(ctaButton) && (
        <ButtonContainer class="md:mt-12">
          <WordpressButtonLink data={ctaButton} arrow />
        </ButtonContainer>
      )}
    </ModuleContainer>
  ) : null
}
