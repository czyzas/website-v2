---
import type {
  ModulesModulesContentLogosLayout,
  CustomerLogoFragment,
  PartnerLogoFragment,
} from '@/__generated__/cms';
import ButtonContainer from '@/components/ButtonContainer.astro';
import LogosCollection from '@/components/LogosCollection.astro';
import LogosGrid from '@/components/LogosGrid.astro';
import ModuleContainer from '@/components/ModuleContainer.astro';
import WordpressButtonLink from '@/components/WordpressButtonLink.astro';
import { linkShouldRender } from '@/scripts/data-parsers/parseLink';
import TabList from '@/components/ui/Tabs/TabList.astro';
import TabListItem from '@/components/ui/Tabs/TabListItem.astro';
import TabPane from '@/components/ui/Tabs/TabPane.astro';
import Tabs from '@/components/ui/Tabs/Tabs.astro';
import { fixDoubleBr } from '@/scripts/fixDoubleBr';
import Prose from '@/components/ui/Prose.astro';
import type { WithModuleMeta } from '@/types';

type Props = WithModuleMeta<ModulesModulesContentLogosLayout>;

const {
  __meta__,
  layoutName,
  backgroundColor,
  layout = 'cards',
  columns = '4',
  ctaButton,
  logosTabs = [],
} = Astro.props;

const tabId = crypto.randomUUID();
const tabs = logosTabs.filter(Boolean).map((tab) => {
  const logosSource = (tab.logosSource || 'gallery') as
    | 'gallery'
    | 'customers'
    | 'partners';

  if (logosSource === 'customers') {
    const logos = (
      (tab.customersLogos?.nodes ?? []) as unknown as CustomerLogoFragment[]
    )
      .map((l) => {
        const logo = !!l && l.__typename === 'Customer' && l.customerAcf?.logo;
        const websiteLink =
          tab.enableLinks &&
          !!l &&
          l.__typename === 'Customer' &&
          l?.customerAcf?.websiteLink?.url;
        return { ...logo, websiteLink };
      })
      .filter(Boolean);

    return { ...tab, logos };
  }
  if (logosSource === 'partners') {
    const logos = (
      (tab.partnersLogos?.nodes ?? []) as unknown as PartnerLogoFragment[]
    )
      .map((l) => {
        const logo = !!l && l.__typename === 'Partner' && l.partnerAcf?.logo;
        const websiteLink =
          tab.enableLinks &&
          !!l &&
          l.__typename === 'Partner' &&
          l?.partnerAcf?.websiteLink?.url;
        return { ...logo, websiteLink };
      })
      .filter(Boolean);

    return { ...tab, logos };
  }

  const logos = tab.logos?.edges?.filter(Boolean);

  return { ...tab, logos };
});
---

{
  tabs.length > 0 ? (
    <ModuleContainer meta={__meta__} name={layoutName!} bg={backgroundColor}>
      <Tabs>
        {tabs.length > 1 && (
          <TabList class="mb-10">
            {tabs.map((tab, tabIndex) => {
              const { logos } = tab;

              if (!logos || logos.length === 0) return null;

              return (
                <TabListItem
                  isActive={tabIndex === 0}
                  id={`${tabId}-${tabIndex}`}
                >
                  <Fragment set:html={fixDoubleBr(tab?.tabTitle)} />
                </TabListItem>
              );
            })}
          </TabList>
        )}
        <div class="tab-content">
          {tabs.map((tab, tabIndex) => {
            const { logos } = tab;

            if (!logos || logos.length === 0) return null;

            return (
              <TabPane isActive={tabIndex === 0} id={`${tabId}-${tabIndex}`}>
                {!!tab.description && (
                  <Prose
                    tag="p"
                    set:html={fixDoubleBr(tab.description)}
                    class="mx-auto mb-8 w-full max-w-[37rem] md:mb-15"
                  />
                )}
                {layout === 'cards' && (
                  <LogosGrid columns={parseInt(columns)} logos={logos} />
                )}
                {layout === 'collection' && <LogosCollection logos={logos} />}
              </TabPane>
            );
          })}
        </div>
      </Tabs>

      {linkShouldRender(ctaButton) && (
        <ButtonContainer class="md:mt-12">
          <WordpressButtonLink data={ctaButton} arrow />
        </ButtonContainer>
      )}
    </ModuleContainer>
  ) : null
}
