---
import { Icon } from 'astro-icon/components';
import { buildI18nPath, getUrlWithoutLang } from '@/i18n/utils';
import { cn } from '@/scripts/cn';
import { getLanguage } from '@/scripts/utils-store-helpers';
import { getStore } from '@/scripts/store';
import { cmsStore } from '@/stores/cmsStore';
import MenuItem from './MenuItem.astro';

const id = `dropdown-${crypto.randomUUID().substring(16)}`;

const {
  currentLanguage,
  allLanguages: languages,
  translations,
} = getLanguage();

const { uri: pageUri } = getStore(cmsStore);
---

<script>
  import { computePosition, flip, shift, autoUpdate } from '@floating-ui/dom';

  const buttons = Array.from(
    document.querySelectorAll<HTMLButtonElement>(
      'button[data-action="toggle-language-switcher"]'
    )
  );

  for (const button of buttons) {
    const relatedDropdown = button.nextElementSibling as HTMLElement;
    if (relatedDropdown) {
      const updatePosition = () => {
        computePosition(button, relatedDropdown, {
          placement: 'bottom',
          middleware: [flip(), shift()],
        }).then(({ x, y }) => {
          relatedDropdown.style.setProperty('left', `${x}px`);
          relatedDropdown.style.setProperty('top', `${y}px`);
        });
      };

      autoUpdate(button, relatedDropdown, updatePosition);
    }
  }
</script>

<div class="language-switcher-container group relative self-stretch">
  <MenuItem
    asButton
    type="button"
    data-action="toggle-language-switcher"
    aria-controls={id}
    aria-pressed="false"
    class="h-full text-sm sm:text-base"
  >
    <span>
      {currentLanguage.toUpperCase()}
    </span>
    <Icon
      name="caret-down"
      class="-translate-y-0.5 transform sm:-translate-y-0"
    />
  </MenuItem>
  {
    languages && (
      <div
        class={cn(
          'pt-4 lg:pt-8',
          'invisible absolute z-10 opacity-0 transition-all duration-100',
          '-translate-y-1 transform group-hover:visible group-hover:translate-y-0 group-hover:opacity-100'
        )}
      >
        <ul class="list space-y-4 rounded-lg bg-white p-6 shadow-menu" id={id}>
          {languages.map((lang) => {
            let uri = getUrlWithoutLang(pageUri || '/');
            const translation = translations.find(
              (t) => t.languageCode === lang.code
            );

            if (translation?.uri) {
              uri = getUrlWithoutLang(translation.uri);
            }

            return (
              <li class="flex flex-col">
                <MenuItem
                  href={buildI18nPath(uri, lang.code)}
                  set:text={lang.translated_name}
                  aria-label={lang.translated_name}
                  data-current={
                    lang.code === currentLanguage ? 'true' : 'false'
                  }
                />
              </li>
            );
          })}
        </ul>
      </div>
    )
  }
</div>
