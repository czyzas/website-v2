---
import type { HTMLAttributes } from 'astro/types';
import type {
  EventListItemFragment,
  InsightsListItemFragment,
  NewsroomListItemFragment,
} from '@/__generated__/cms';
import { buildI18nPath } from '@/i18n/utils';
import { TRANSLATIONS } from '@/constants';
import { getStore } from '@/scripts/store';
import { languageStore } from '@/stores/languageStore';
import type { WithAttributes } from '@/types';
import { cn } from '@/scripts/cn';
import { parseTags } from '@/scripts/data-parsers/parseTag';
import EventDate from '@/components/EventDate.astro';
import WordpressButtonLink from './WordpressButtonLink.astro';
import Prose from './ui/Prose.astro';
import CardWithMergedImage from './CardWithMergedImage.astro';
import CardWithBigImage from './CardWithBigImage.astro';
import ArticleTag from './ArticleTag.astro';

type UnparsedArticle =
  | InsightsListItemFragment
  | NewsroomListItemFragment
  | EventListItemFragment;

interface ListFeaturedArticleProps extends HTMLAttributes<'div'> {
  data?: UnparsedArticle;
  layout?: CardLayout;
}
type Props = WithAttributes<ListFeaturedArticleProps>;

const {
  class: className,
  data,
  layout = 'overlapping',
  ...props
} = Astro.props;

const { currentLanguage } = getStore(languageStore);
const lang = currentLanguage.code;

const uri = data?.uri;
const title = data?.title;
const category = data?.categories?.nodes?.[0]?.name;
const content = data?.subpageSettings?.introduction;
const image = data?.subpageSettings?.image;
const tags = parseTags(data?.tags?.nodes);

type CardLayout = keyof typeof layouts;

const layouts = {
  // side: CardWithSideImage,
  overlapping: CardWithBigImage,
  // spaced: CardWithImageSpaced,
  merged: CardWithMergedImage,
} as const;

const ContentWrapper =
  layout in layouts ? layouts[layout as CardLayout] : layouts.overlapping;
---

{
  !!data && (
    <ContentWrapper
      {...props}
      image={image}
      size={layout === 'merged' ? 'lg' : undefined}
      class={cn('list-featured-article', className)}
    >
      <div class="flex-1 flex flex-col items-start gap-4">
        {!!category && (
          <div class="typography-card-title text-sw-text-subdued">
            {category}
          </div>
        )}
        {!!title && (
          <div class="flex items-center gap-4 md:gap-8">
            {data.__typename === 'Event' && data.eventAcf?.eventDate && (
              <EventDate
                date={data.eventAcf.eventDate}
                class="border border-sw-text-disabled"
              />
            )}
            <div class="typography-cards-bold-large">{title}</div>
          </div>
        )}
        {!!content && <Prose set:html={content} />}
        {!!uri && (
          <WordpressButtonLink
            data={{
              url: buildI18nPath(uri, lang),
              title: TRANSLATIONS.READ_FULL_STORY,
            }}
            arrow
          />
        )}
        {tags.length > 0 && (
          <div class="tags mt-auto flex flex-wrap gap-2.5">
            {tags.map((tag) =>
              tag.shouldRender ? (
                <ArticleTag color={tag.color}>{tag.name}</ArticleTag>
              ) : null
            )}
          </div>
        )}
      </div>
    </ContentWrapper>
  )
}
