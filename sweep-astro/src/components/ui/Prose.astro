---
import { getImage } from 'astro:assets';
import type { HTMLAttributes, HTMLTag } from 'astro/types';
import { parse as parseHTML } from 'node-html-parser';
import { cn } from '@/scripts/cn';
import type { WithAttributes } from '@/types';

interface ProseProps extends HTMLAttributes<'div'> {
  tag?: HTMLTag;
}
type Props = WithAttributes<ProseProps>;

const { class: className, tag: Tag = 'div', ...props } = Astro.props;
let updatedContent = '';
if (Astro.slots.has('default')) {
  try {
    const renderedSlot = await Astro.slots.render('default');
    const root = parseHTML(renderedSlot);
    const imgs = root.querySelectorAll('img');
    for (const img of imgs) {
      const src = img.getAttribute('src');
      const width = img.getAttribute('width');
      const height = img.getAttribute('height');
      if (!src) continue;

      const optimizedImage = await getImage({
        src,
        width,
        height,
        format: src.endsWith('svg') ? 'svg' : 'webp',
      });

      img.setAttribute('src', optimizedImage.src);
    }

    updatedContent = root.toString();
  } catch {}
}
---

<style>
  .prose-content {
    :global(:where(p, ol, ul, blockquote, img, video, iframe)) {
      @apply mt-6;
    }

    :global(:where(a, a:hover, a:focus)) {
      @apply text-current underline decoration-current underline-offset-4;
      text-decoration-skip-ink: none;
    }
    :global(:where(a:hover, a:focus)) {
      @apply text-sw-sky-400;
    }

    :global(:where(strong)) {
      @apply font-bold;
    }

    :global(:where(ol, ul)) {
      @apply ml-6;
    }

    :global(:where(img)) {
      @apply h-auto w-full rounded-lg;
    }

    :global(:where(ol)) {
      @apply list-decimal;
    }

    :global(:where(ul)) {
      @apply list-disc;
    }

    :global(:where(li)) {
      @apply mt-2;
    }

    :global(:where(ol > li::marker)) {
      @apply font-normal text-current;
    }

    :global(:where(ul > li::marker)) {
      @apply text-current;
    }

    :global(:where(ol ol)) {
      @apply list-[lower-latin];
    }

    :global(:where(ol ol ol)) {
      @apply list-[lower-roman];
    }

    :global(:where(h2, h3, h4)) {
      @apply mb-3 mt-8 text-black;
    }

    :global(:where(h2 + *, h3 + *, h4 + *)) {
      @apply mt-0;
    }

    :global(:where(h2)) {
      @apply typography-article-header;
    }

    :global(:where(h3)) {
      @apply typography-article-subheader;
    }

    :global(:is(.as-h2)) {
      @apply typography-h2;
    }

    :global(:is(.as-h3)) {
      @apply typography-h3;
    }

    :global(:where(iframe)) {
      @apply w-full h-auto aspect-video rounded-lg;
    }

    :global(:where(:first-child)) {
      @apply mt-0;
    }
  }
</style>

{
  Astro.slots.has('default') && (
    <Tag {...props} class={cn('prose-content typography-body', className)}>
      <Fragment set:html={updatedContent} />
    </Tag>
  )
}
