---
import type { HTMLAttributes } from 'astro/types';
import type { UnparsedImage } from '@/scripts/data-parsers/parseImage';
import { cn } from '@/scripts/cn';
import type { WithAttributes } from '@/types';
import { fixDoubleBr } from '@/scripts/fixDoubleBr';
import WordpressImage from './WordpressImage.astro';
import Card from './ui/Card.astro';
import Grid from './ui/Grid.astro';
import Prose from './ui/Prose.astro';

interface CardsGridProps extends HTMLAttributes<'div'> {
  columns?: number;
  cards?: { icon?: UnparsedImage; title?: string; content?: string }[];
}

type Props = WithAttributes<CardsGridProps>;

const { class: className, columns = 4, cards = [], ...props } = Astro.props;

const columnClassName: Record<number, string> = {
  1: cn('col-span-full'),
  2: cn('col-span-full xs:col-span-6'),
  3: cn('col-span-full md:col-span-4'),
  4: cn('col-span-full xs:col-span-6 md:col-span-4 lg:col-span-3'),
};
---

{
  cards.length > 0 && (
    <Grid {...props} class={cn('cards-grid', className)}>
      {cards.map((card) => (
        <Card class={cn(columnClassName?.[columns] ?? 'col-span-full')}>
          <WordpressImage data={card.icon} class="size-8 object-contain mb-3" />
          <div
            class="typography-cards-bold-large"
            set:html={fixDoubleBr(card.title)}
          />
          {card.content ? (
            <Prose class="mt-2.5" set:html={card.content} />
          ) : null}
        </Card>
      ))}
    </Grid>
  )
}
