---
import type { HTMLAttributes } from 'astro/types';
import type { UnparsedImageWithLink } from '@/scripts/data-parsers/parseImage';
import { cn } from '@/scripts/cn';
import type { WithAttributes } from '@/types';
import WordpressImage from './WordpressImage.astro';
import Card from './ui/Card.astro';
import Grid from './ui/Grid.astro';

type Props = WithAttributes<
  {
    columns?: number;
    logos?: UnparsedImageWithLink[];
  } & HTMLAttributes<'div'>
>;

const { class: className, columns = 4, logos = [], ...props } = Astro.props;

const columnClassName: Record<number, string> = {
  1: cn('col-span-full'),
  2: cn('col-span-full xs:col-span-6'),
  3: cn('col-span-full xs:col-span-6 md:col-span-4'),
  4: cn('col-span-full xs:col-span-6 md:col-span-4 lg:col-span-3'),
};
---

{
  logos.length > 0 && (
    <Grid {...props} class={cn('logos-grid', className)}>
      {logos.map((rawLogo) => {
        const { websiteLink: uri, ...logo } = rawLogo;
        return (
          <Card
            class={cn(
              'customer-logo flex items-center justify-center p-6',
              columnClassName?.[columns] ?? 'col-span-full'
            )}
          >
            {uri ? (
              <a href={uri} class="contents">
                <WordpressImage
                  data={logo}
                  class="max-h-20 w-fit max-w-40 object-contain"
                />
              </a>
            ) : (
              <WordpressImage
                data={logo}
                class="max-h-20 w-fit max-w-40 object-contain"
              />
            )}
          </Card>
        );
      })}
    </Grid>
  )
}
