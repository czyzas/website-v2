---
import type { HTMLAttributes } from 'astro/types';
import type { WithAttributes } from '@/types';
import { buildI18nPath } from '@/i18n/utils';
import ArticleCard from '@/components/ArticleCard.astro';
import { parseTags } from '@/scripts/data-parsers/parseTag';
import type {
  CaseStudyCardFragment,
  EventListItemFragment,
  InsightsListItemFragment,
  NewsroomListItemFragment,
} from '@/__generated__/cms';
import { cn } from '@/scripts/cn';
import { parseCaseStudyCustomer } from '@/scripts/data-parsers/parseCaseStudies';
import { parseLink } from '@/scripts/data-parsers/parseLink';
import type { UnparsedLink } from '@/scripts/data-parsers/parseLink';
import { getDefaultTopImage } from '@/scripts/postTypeOptions';
import { getLanguage } from '@/scripts/utils-store-helpers';
import Grid from './ui/Grid.astro';
import ArticleTag from './ArticleTag.astro';
import ArticleEventDetails from './ArticleEventDetails.astro';
import ButtonContainer from './ButtonContainer.astro';
import WordpressButtonLink from './WordpressButtonLink.astro';

interface ArticlesGridProps extends HTMLAttributes<'div'> {
  postType: 'insights' | 'newsroom' | 'event' | 'case-study';
  posts: (
    | InsightsListItemFragment
    | NewsroomListItemFragment
    | EventListItemFragment
    | CaseStudyCardFragment
  )[];
  columns?: 3 | 4;
  cta?: UnparsedLink;
}

type Props = WithAttributes<ArticlesGridProps>;

const { posts, columns = 3, cta: rawCta } = Astro.props;
const { currentLanguage } = getLanguage();
const cta = parseLink(rawCta);
---

{
  posts.length > 0 && (
    <Grid {...Astro.props}>
      {posts.map((post) => {
        if (!post.uri) return null;

        const categoryName =
          'categories' in post
            ? post.categories?.nodes?.[0]?.name ?? ''
            : undefined;
        const postTags = 'tags' in post ? parseTags(post.tags?.nodes) : [];
        const eventDate =
          post.__typename === 'Event' ? post.eventAcf?.eventDate : undefined;

        let { title } = post;
        if (post.__typename === 'CaseStudy') {
          const customer = parseCaseStudyCustomer(post);
          const longerTitle = post.caseStudyAcf?.longerTitle;
          title = longerTitle || customer?.title || '';
        }

        return (
          <ArticleCard
            link={{ url: buildI18nPath(post.uri, currentLanguage) }}
            image={
              post.subpageSettings?.image || getDefaultTopImage(post.__typename)
            }
            postType={post.__typename}
            class={cn('col-span-full', {
              'sm:col-span-6 lg:col-span-4': columns === 3,
              'sm:col-span-6 xl:col-span-3': columns === 4,
            })}
          >
            {post.__typename === 'Event' && !!eventDate && (
              <ArticleEventDetails slot="image-addition" date={eventDate} />
            )}

            {!!categoryName && (
              <div class="typography-card-title text-sw-text-subdued">
                {categoryName}
              </div>
            )}
            {!!title && <div class="typography-cards-bold-large">{title}</div>}
            {postTags.length > 0 && (
              <div class="tags mt-auto flex flex-wrap gap-2.5">
                {postTags.map((postTag) =>
                  postTag.shouldRender ? (
                    <ArticleTag color={postTag.color}>
                      {postTag.name}
                    </ArticleTag>
                  ) : null
                )}
              </div>
            )}
          </ArticleCard>
        );
      })}
      {cta.shouldRender && (
        <ButtonContainer marginSize="sm" class="col-span-full">
          <WordpressButtonLink data={cta} secondary />
        </ButtonContainer>
      )}
    </Grid>
  )
}
