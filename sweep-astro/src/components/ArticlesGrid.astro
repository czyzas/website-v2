---
import type { WithAttributes } from '@/types';
import { buildI18nPath } from '@/i18n/utils';
import ArticleCard from '@/components/ArticleCard.astro';
import { parseTags } from '@/scripts/data-parsers/parseTag';
import type { InsightsListItemFragment } from '@/__generated__/cms';
import Grid from './ui/Grid.astro';
import ArticleTag from './ArticleTag.astro';

interface ArticlesGridProps {
  posts: InsightsListItemFragment[];
  lang: string;
}

type Props = WithAttributes<ArticlesGridProps>;

const { posts, lang } = Astro.props;
---

{
  posts.length > 0 && (
    <Grid>
      {posts.map((post) => {
        if (!post.uri) return null;
        const categoryName = post.categories?.nodes?.[0]?.name ?? '';
        const postTags = parseTags(post.tags?.nodes ?? []);
        return (
          <ArticleCard
            link={{ url: buildI18nPath(post.uri, lang) }}
            image={post.subpageSettings?.image}
            class="col-span-full sm:col-span-6 lg:col-span-4"
          >
            {!!categoryName && (
              <div class="typography-card-title text-sw-text-subdued">
                {categoryName}
              </div>
            )}
            {!!post.title && (
              <div class="typography-cards-bold-large">{post.title}</div>
            )}
            {postTags.length > 0 && (
              <div class="tags mt-auto flex flex-wrap gap-2.5">
                {postTags.map((postTag) =>
                  postTag.shouldRender ? (
                    <ArticleTag color={postTag.color}>
                      {postTag.name}
                    </ArticleTag>
                  ) : null
                )}
              </div>
            )}
          </ArticleCard>
        );
      })}
    </Grid>
  )
}
