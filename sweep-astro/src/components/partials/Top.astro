---
import type { HTMLAttributes } from 'astro/types';
import { parseLink } from '@/scripts/data-parsers/parseLink';
import type { UnparsedLink } from '@/scripts/data-parsers/parseLink';
import { cn } from '@/scripts/cn';
import type { UnparsedImage } from '@/scripts/data-parsers/parseImage';
import type { BreadcrumbsType, ColumnSizes } from '@/types';
import Container from '../ui/Container.astro';
import Button from '../ui/Button.astro';
import WordpressImage from '../WordpressImage.astro';
import Grid from '../ui/Grid.astro';
import Breadcrumbs from '../Breadcrumbs.astro';
import { getStore } from '@/scripts/store';
import { cmsStore } from '@/stores/cmsStore';
import { isBoolean } from 'lodash-es';

interface TopProps {
  title?: string;
  /** @default 'h1' */
  titleSize?: 'h1' | 'h2';
  content?: string;
  link?: UnparsedLink;
  /** @default true */
  hasImage?: boolean;
  image?: UnparsedImage;
  columnsDistribution?: ColumnSizes;
  overline?: string;
  breadcrumbs?: BreadcrumbsType;
}

type Props = HTMLAttributes<'section'> & TopProps;

const {
  title,
  titleSize = 'h1',
  content,
  link: unparsedLink,
  image,
  hasImage = true,
  columnsDistribution = '5-7',
  breadcrumbs,
  overline,
  class: className,
  ...props
} = Astro.props;

const columnsSizes: Record<ColumnSizes, [string, string]> = {
  '5-7': ['md:col-span-5', 'md:col-span-7'],
  '6-6': ['md:col-span-6', 'md:col-span-6'],
  '7-5': ['md:col-span-7', 'md:col-span-5'],
} as const;

const titleSizes = {
  h1: 'typography-h2 md:typography-h1',
  h2: 'typography-h2',
} as const;

const store = getStore(cmsStore);
const { pageTitle, subpageSettings } = store;
const finalTitle = title ?? (subpageSettings?.customTitle || pageTitle || '');
const finalContent = content ?? (subpageSettings?.introduction || '');
const finalUnparsedLink = unparsedLink ?? subpageSettings?.topButtonLink;
const finalImage =
  isBoolean(image) && !image ? undefined : image ?? subpageSettings?.image;
const finalColumnsDistribution =
  columnsDistribution ?? (subpageSettings?.topDistribution || '5-7');

const titleSizeClass = titleSizes?.[titleSize] ?? titleSizes.h1;

const finalHasImage = hasImage && (finalImage || Astro.slots.has('image'));
const link = parseLink(finalUnparsedLink);
const [contentColumnSize, imageColumnSize] = finalHasImage
  ? columnsSizes?.[finalColumnsDistribution] ?? columnsSizes['5-7']
  : [];
---

<section
  {...props}
  class={cn(
    'top',
    'bg-gradient-to-b from-sw-surface-subdued to-transparent',
    className
  )}
>
  <Container>
    <Grid class="gap-y-8">
      <div
        class={cn(
          'col-span-full',
          contentColumnSize,
          'flex flex-col items-start justify-center gap-4'
        )}
      >
        {
          breadcrumbs && breadcrumbs.length > 0 && (
            <Breadcrumbs breadcrumbs={breadcrumbs} />
          )
        }
        {
          !!overline && (
            <span class="typography-card-title text-sw-sky-400">
              {overline}
            </span>
          )
        }
        <h1 class={titleSizeClass} set:html={finalTitle} />
        {
          !!finalContent && (
            <div
              class="typography-body md:max-w-[22.125rem]"
              set:html={finalContent}
            />
          )
        }
        <slot name="details" />
        {
          link.shouldRender && (
            <Button
              asLink
              href={link.url}
              target={link.target}
              class="hidden w-full md:inline-flex md:w-auto"
            >
              {link.title}
            </Button>
          )
        }
      </div>
      {
        finalHasImage && (
          <div
            class={cn(
              'col-span-full',
              imageColumnSize,
              'flex items-center justify-end'
            )}
          >
            <slot name="image">
              <WordpressImage
                data={finalImage}
                loading="eager"
                class="rounded-lg"
              />
            </slot>
          </div>
        )
      }
      {
        link.shouldRender && (
          <Button
            asLink
            href={link.url}
            target={link.target}
            class="col-span-full inline-flex w-full md:hidden"
          >
            {link.title}
          </Button>
        )
      }
    </Grid>
  </Container>

  <slot />
</section>
