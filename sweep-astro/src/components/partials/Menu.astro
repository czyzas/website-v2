---
import { cn } from '@/scripts/cn';
import { getStore } from '@/scripts/store';
import { cmsStore } from '@/stores/cmsStore';
import { buildI18nPath } from '@/i18n/utils';
import { languageStore } from '@/stores/languageStore';
import { TRANSLATIONS } from '@/constants';
import MenuItem from '../MenuItem.astro';
import MenuItemCard from '../MenuItemCard.astro';

// TODO: create useLanguage hook to get current lang from the store automatically
const { currentLanguage } = getStore(languageStore);
const { primaryMenu } = getStore(cmsStore);

const menu = (primaryMenu?.menuItems?.nodes ?? []).filter(Boolean);
---

{
  menu.length > 0 && (
    <div class="navbar flex-1 self-stretch">
      <nav class="navbar-nav relative h-full">
        <ul class="menu main-menu h-full flex justify-center items-center gap-8">
          {menu.map((item) => {
            if (item.parentDatabaseId !== 0) return null;
            const children = menu.filter(
              (child) => child.parentDatabaseId === item.databaseId
            );
            return (
              <li>
                <MenuItem
                  href={item.uri}
                  target={item.target}
                  data-menu-item-id={item.databaseId}
                  data-parent-item-id={item.parentDatabaseId}
                  class={cn('main-menu-item text-center')}
                  dropdown={children.length > 0}
                >
                  {item.label}
                </MenuItem>
              </li>
            );
          })}
        </ul>
        <div
          data-state="inactive"
          class={cn(
            'submenu-container absolute bg-white p-6 overflow-hidden w-full top-full translate-y-8 shadow-menu grid grid-cols-1 grid-rows-1 rounded-lg',
            'invisible data-[state=active]:visible opacity-0 data-[state=active]:opacity-100'
          )}
        >
          {menu.map((item) => {
            if (item.parentDatabaseId !== 0) return null;

            const children = menu.filter(
              (child) => child.parentDatabaseId === item.databaseId
            );

            if (children.length === 0) return null;

            const relatedPost =
              item.menuItemAcf?.relatedPost?.node.__typename === 'InsightsItem'
                ? item.menuItemAcf?.relatedPost?.node
                : null;
            const relatedPostTitle = item.menuItemAcf?.relatedPostTitle ?? '';

            return (
              <div
                data-parent-id={item.databaseId}
                class={cn(
                  'submenu-wrapper',
                  'col-span-full row-span-full',
                  'invisible h-0 data-[state=active]:h-auto data-[state=active]:visible opacity-0 data-[state=active]:opacity-100',
                  'flex items-start'
                )}
              >
                <ul
                  data-state="inactive"
                  style={{ '--rows': Math.min(children.length, 5) }}
                  class={cn(
                    'menu submenu flex-1 bg-white grid grid-flow-col auto-cols-fr gap-x-15 gap-y-4',
                    'grid-rows-[repeat(var(--rows),minmax(0,auto))]'
                  )}
                >
                  {children.map((child) => (
                    <li>
                      <a
                        href={child.uri}
                        target={child.target}
                        class={cn(
                          'inline-flex items-center justify-center gap-2 text-base font-medium hover:text-sw-sky-400'
                        )}
                      >
                        {child.label}
                      </a>
                    </li>
                  ))}
                </ul>
                {!!relatedPost && (
                  <MenuItemCard
                    class="flex-[2]"
                    featuredTitle={relatedPostTitle}
                    title={relatedPost.title}
                    link={{
                      url: relatedPost.uri
                        ? buildI18nPath(relatedPost.uri, currentLanguage.code)
                        : undefined,
                      title: TRANSLATIONS.READ_MORE,
                    }}
                    tags={relatedPost.insightsTags?.nodes}
                    image={relatedPost.subpageSettings?.image}
                  />
                )}
              </div>
            );
          })}
        </div>
      </nav>
    </div>
  )
}

<script>
  (function () {
    const navbar = document.querySelector<HTMLElement>('.navbar');
    if (!navbar) return;
    const mainItems = navbar.querySelectorAll<HTMLAnchorElement>(
      'ul.main-menu a.main-menu-item'
    );
    const submenuContainer =
      navbar.querySelector<HTMLElement>('.submenu-container');
    if (!submenuContainer) return;

    let containerWaiter: NodeJS.Timeout | null = null;

    for (const mainItem of mainItems) {
      const id = mainItem.dataset.menuItemId;
      if (!id) continue;
      const submenu = navbar.querySelector<HTMLElement>(
        `.submenu-wrapper[data-parent-id="${id}"]`
      );
      if (!submenu) continue;

      let waiter: NodeJS.Timeout | null = null;

      const handlePointerEnter = () => {
        if (waiter) {
          clearTimeout(waiter);
        }
        if (containerWaiter) {
          clearTimeout(containerWaiter);
        }
        submenu.dataset.state = 'active';
        submenuContainer.dataset.state = 'active';
      };

      const handlePointerLeave = () => {
        waiter = setTimeout(() => {
          submenu.dataset.state = 'inactive';
        }, 250);
        containerWaiter = setTimeout(() => {
          submenuContainer.dataset.state = 'inactive';
        }, 250);
      };

      mainItem.addEventListener('pointerenter', handlePointerEnter);
      submenu.addEventListener('pointerenter', handlePointerEnter);

      mainItem.addEventListener('pointerleave', handlePointerLeave);
      submenu.addEventListener('pointerleave', handlePointerLeave);
    }
  })();
</script>
