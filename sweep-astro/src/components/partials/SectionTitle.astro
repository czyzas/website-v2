---
import { cva } from 'class-variance-authority';
import { cn } from '@/scripts/cn';
import { sectionTitleShouldRender } from '@/scripts/data-parsers/parseSectionTitle';
import type { ParsedSectionTitle } from '@/scripts/data-parsers/parseSectionTitle';
import { fixDoubleBr } from '@/scripts/fixDoubleBr';
import Prose from '../ui/Prose.astro';

interface SectionTitleProps {
  withMargin?: boolean;
}

type Props = Partial<ParsedSectionTitle> & SectionTitleProps;

const {
  tag = 'h2',
  hasCustomStyle,
  displayAs = tag,
  overline = '',
  headline = '',
  textUnder = '',
  withMargin = false,
} = Astro.props;

const shouldRender = sectionTitleShouldRender(Astro.props);

const Tag = tag as 'h2' | 'h3' | 'h4';

const look = (hasCustomStyle ? displayAs : tag) as
  | 'h2'
  | 'h3'
  | 'h4'
  | 'overline';

const headlineVariants = cva([], {
  variants: {
    variant: {
      h2: ['typography-h3 md:typography-h2'],
      h3: ['typography-h4 md:typography-h3'],
      h4: ['typography-h4'],
      overline: ['typography-subhead'],
    },
  },
});
---

{
  shouldRender && (
    <div
      class={cn(
        'section-title flex flex-col gap-2',
        'text-left md:text-center items-start md:items-center',
        { 'mb-8': withMargin && look === 'overline' },
        { 'mb-8 md:mb-15': withMargin && look !== 'overline' }
      )}
    >
      {!!overline.length && look !== 'overline' && (
        <p class="typography-subhead" set:html={overline} />
      )}

      <Tag
        class={headlineVariants({ variant: look })}
        set:html={fixDoubleBr(headline)}
      />

      {!!textUnder.length && (
        <Prose
          class="typography-body-large text-sw-text-subdued mt-2"
          set:html={textUnder}
        />
      )}
    </div>
  )
}
