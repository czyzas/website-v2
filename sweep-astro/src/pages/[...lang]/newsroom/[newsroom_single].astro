---
import type { InferGetStaticParamsType } from 'astro';
import { isString } from 'lodash-es';
import { defaultLocale } from '@/i18n/config';
import { getUrlWithoutLang, getLangParam } from '@/i18n/utils';
import {
  fetchNewsroomPagesStaticPaths,
  fetchNewsroomSingle,
} from '@/lib/fetchCMSData';
import {
  cleanURI,
  compareURI,
  prefixURI,
  unprefixURI,
} from '@/scripts/utils-uri';
import ArticlePage from '@/templates/ArticlePage.astro';

// TODO: use some kind of reusable function
export const getStaticPaths = async () => {
  const finalPaths = [];

  const paths = await fetchNewsroomPagesStaticPaths();
  for (const staticPath of paths) {
    if (!staticPath?.languageCode || !staticPath?.uri) {
      continue;
    }

    const paramPath = getUrlWithoutLang(staticPath.uri);

    finalPaths.push({
      params: {
        lang: getLangParam(staticPath.languageCode),
        newsroom_single: unprefixURI(paramPath, 'newsroom'),
      },
    });
  }

  return finalPaths;
};

const params = Astro.params as InferGetStaticParamsType<typeof getStaticPaths>;

const { newsroom_single: unprefixedURI, lang: paramLang = defaultLocale } =
  params;

const lang = isString(paramLang) ? paramLang : defaultLocale;
const rawUri = prefixURI(unprefixedURI, 'newsroom');
const uri = cleanURI(rawUri, lang);

// TODO: use some kind of reusable function
if (!uri) {
  if (import.meta.env.SSR) {
    return Astro.redirect('/404');
  }

  throw new Error(`Page with uri '${rawUri}' does not exists`);
}

const data = await fetchNewsroomSingle(uri, lang);

// TODO: use some kind of reusable function
if (!compareURI(uri, data.page?.uri)) {
  if (import.meta.env.SSR) {
    return Astro.redirect('/404');
  }

  throw new Error(`Page with uri '${rawUri}' does not exists`);
}
---

<ArticlePage postType="newsroom" lang={lang} data={data} />
