---
import type { GetStaticPaths } from 'astro';
import Top from '@/components/partials/Top.astro';
import Layout from '@/layouts/Layout.astro';
import { fetchContactPage } from '@/lib/fetchCMSData';
import { updateStore } from '@/scripts/store';
import { cmsStore } from '@/stores/cmsStore';
import { languageStore } from '@/stores/languageStore';
// import { getStaticPathsWithLangs } from '@/i18n/utils';
import Section from '@/components/ui/Section.astro';
import Demo from '@/components/Demo.astro';
import Container from '@/components/ui/Container.astro';
import Form from '@/components/hubspot-form/Form.astro';
import SectionTitle from '@/components/partials/SectionTitle.astro';
import { parseSectionTitle } from '@/scripts/data-parsers/parseSectionTitle';
import Grid from '@/components/ui/Grid.astro';
import ButtonContainer from '@/components/ButtonContainer.astro';
import WordpressButtonLink from '@/components/WordpressButtonLink.astro';
import { linkShouldRender } from '@/scripts/data-parsers/parseLink';
import ArticleCard from '@/components/ArticleCard.astro';
import Prose from '@/components/ui/Prose.astro';
import { defaultLocale } from '@/i18n/config';

export const getStaticPaths = (() => {
  // TODO: fix this
  // const pfs = getStaticPathsWithLangs();
  const pfs = [{ params: { lang: undefined } }];
  return pfs;
}) satisfies GetStaticPaths;

const { lang = defaultLocale } = Astro.params;

const data = await fetchContactPage(lang as string);
const page = data.page!;

updateStore(cmsStore, 'contactPage', page);
updateStore(languageStore, 'currentLanguage', page.language!);
updateStore(languageStore, 'languages', data.languages);
updateStore(cmsStore, 'primaryMenu', data.primaryMenu!);
updateStore(cmsStore, 'themeOptions', data.themeOptions!);

const { subpageSettings } = page;
const pageTitle = page?.title ?? '';
const title = subpageSettings?.customTitle || pageTitle || '';
const content = subpageSettings?.introduction ?? '';
const image = subpageSettings?.image;

const form = page.contactAcf?.form;
const formGuid = form?.hubspotFormGuid ?? '';

const demo = page.contactAcf?.demo;
const updates = page.contactAcf?.updates;
const updatesCards = updates?.cards ?? [];

const offices = page.contactAcf?.offices;
const officesCards = offices?.cards ?? [];
---

<Layout name="contact" pageTitle={pageTitle}>
  <Top title={title} content={content} image={image} class="py-25" />
  {
    formGuid ? (
      <Section bg="surface-subdued" class="md:py-15">
        <Container>
          <Grid>
            <div class="form-container col-span-full lg:col-start-3 lg:col-end-11">
              <Form formGuid={formGuid} />
            </div>
          </Grid>
        </Container>
      </Section>
    ) : null
  }
  <Section name="demo">
    <Container>
      <Demo title={demo?.title} button={demo?.button} image={demo?.image} />
    </Container>
  </Section>
  <Section name="updates" bg="surface-subdued">
    <Container>
      <SectionTitle
        withMargin
        {...parseSectionTitle(updates?.sectionTitle?.selectSectionTitle)}
      />
      {
        updatesCards.length ? (
          <Grid>
            {updatesCards.map((card) => (
              <ArticleCard
                link={card?.link}
                image={card?.image}
                class="col-span-full md:col-span-6 lg:col-span-3"
              >
                <p
                  class="typography-card-title text-sw-text-subdued"
                  set:html={card?.overline}
                />
                <h3
                  class="typography-cards-bold-large"
                  set:html={card?.title}
                />
              </ArticleCard>
            ))}
          </Grid>
        ) : null
      }
      {
        linkShouldRender(updates?.button) && (
          <ButtonContainer class="mt-8 md:mt-15">
            <WordpressButtonLink data={updates?.button} arrow />
          </ButtonContainer>
        )
      }
    </Container>
  </Section>
  <Section name="offices">
    <Container>
      <SectionTitle
        withMargin
        {...parseSectionTitle(offices?.sectionTitle?.selectSectionTitle)}
      />

      {
        officesCards.length ? (
          <Grid>
            {officesCards.map((card) => (
              <ArticleCard
                image={card?.image}
                class="col-span-full sm:col-span-6 md:col-span-4"
              >
                <h3
                  class="typography-cards-bold-large"
                  set:html={card?.title}
                />
                <Prose set:html={card?.content} />
              </ArticleCard>
            ))}
          </Grid>
        ) : null
      }
    </Container>
  </Section>
</Layout>
