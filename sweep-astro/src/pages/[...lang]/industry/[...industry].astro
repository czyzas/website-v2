---
import type { InferGetStaticParamsType } from 'astro';
import { defaultLocale } from '@/i18n/config';
import { getLangParam, getUrlWithoutLang } from '@/i18n/utils';
import {
  fetchIndustryPagesStaticPaths,
  fetchIndustrySingle,
} from '@/lib/fetchCMSData';
import { cleanURI, compareURI } from '@/scripts/utils-uri';
import DefaultPage from '@/templates/DefaultPage.astro';

export const getStaticPaths = async () => {
  const finalPaths = [];

  const paths = await fetchIndustryPagesStaticPaths();
  for (const staticPath of paths) {
    if (!staticPath?.languageCode || !staticPath?.uri) {
      continue;
    }

    const paramPath = getUrlWithoutLang(staticPath.uri);

    finalPaths.push({
      params: {
        lang: getLangParam(staticPath.languageCode),
        industry: paramPath.replace('industry/', ''),
      },
      props: {
        uri: paramPath,
      },
    });
  }

  return finalPaths;
};

const { lang: paramLang = defaultLocale } =
  Astro.params as InferGetStaticParamsType<typeof getStaticPaths>;

const { uri: paramUri } = Astro.props;
const lang =
  paramLang && typeof paramLang === 'string' ? paramLang : defaultLocale;
const uri = cleanURI(paramUri, lang, { defaultUri: '/' });

if (!uri) {
  if (import.meta.env.SSR) {
    return Astro.redirect('/404');
  }

  throw new Error(`Page with uri '${paramUri}' does not exists`);
}

const data = await fetchIndustrySingle(uri, lang);

if (!compareURI(uri, data.page?.uri)) {
  if (import.meta.env.SSR) {
    return Astro.redirect('/404');
  }

  throw new Error(`Page with uri '${paramUri}' does not exists`);
}
---

<DefaultPage data={data} />
