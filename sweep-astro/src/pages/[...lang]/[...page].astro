---
import type { InferGetStaticParamsType } from 'astro';
import { fixLangParams, getLangParam, getUrlWithoutLang } from '@/i18n/utils';
import {
  fetchDefaultPage,
  fetchDefaultPagesStaticPaths,
  fetchHomepage,
} from '@/lib/fetchCMSData';
import { defaultLocale } from '@/i18n/config';
import { cleanURI, compareURI } from '@/scripts/uri-utils';
import Homepage from './_index.astro';
import Page from './_page.astro';

export const getStaticPaths = async () => {
  const finalPaths = [];

  const paths = await fetchDefaultPagesStaticPaths();
  for (const staticPath of paths) {
    if (
      !['Default', 'Homepage'].includes(
        staticPath.template?.templateName ?? ''
      ) ||
      !staticPath?.languageCode ||
      !staticPath?.uri
    ) {
      continue;
    }

    const paramPath = getUrlWithoutLang(staticPath.uri);

    finalPaths.push({
      params: {
        lang: getLangParam(staticPath.languageCode),
        page: paramPath,
      },
      props: staticPath,
    });
  }

  return finalPaths;
};

const { page: paramUri, lang: paramLang = defaultLocale } = fixLangParams(
  Astro.params,
  'page'
) as InferGetStaticParamsType<typeof getStaticPaths>;

const lang =
  paramLang && typeof paramLang === 'string' ? paramLang : defaultLocale;
const uri = cleanURI(paramUri, lang, { defaultUri: '/' });
const isHomepage = uri === '/';

let data;
if (isHomepage) {
  data = await fetchHomepage(lang);
} else {
  if (!uri) {
    if (import.meta.env.SSR) {
      return Astro.redirect('/404');
    }

    throw new Error(`Page with uri '${paramUri}' does not exists`);
  }

  data = await fetchDefaultPage(uri, lang);

  if (!compareURI(uri, data.page?.uri)) {
    if (import.meta.env.SSR) {
      return Astro.redirect('/404');
    }

    throw new Error(`Page with uri '${paramUri}' does not exists`);
  }
}
---

{isHomepage ? <Homepage data={data} /> : <Page data={data} />}
