---
import type { InferGetStaticParamsType } from 'astro';
import { fixLangParams } from '@/i18n/utils';
import {
  fetchDefaultPage,
  fetchDefaultPagesStaticPaths,
  fetchHomepage,
} from '@/lib/fetchCMSData';
import { defaultLocale } from '@/i18n/config';
import { cleanURI, compareURI } from '@/scripts/utils-uri';
import Homepage from '@/templates/Homepage.astro';
import DefaultPage from '@/templates/DefaultPage.astro';
import { createPagesStaticPaths } from '@/scripts/utils-static-paths';

export const getStaticPaths = async () => {
  const paths = await fetchDefaultPagesStaticPaths();
  return createPagesStaticPaths(paths, {
    paramKey: 'page',
    paramValueType: 'uri',
    customValidator(staticPath) {
      return ['Default', 'Homepage'].includes(
        staticPath.template?.templateName ?? ''
      );
    },
  });
};

const { page: paramUri, lang = defaultLocale } = fixLangParams(
  Astro.params,
  'page'
) as InferGetStaticParamsType<typeof getStaticPaths>;

const uri = cleanURI(paramUri, lang, { defaultUri: '/' });
const isHomepage = uri === '/';

let data;
if (isHomepage) {
  data = await fetchHomepage(lang);
} else {
  if (!uri) {
    if (import.meta.env.SSR) {
      return Astro.redirect('/404');
    }

    throw new Error(`Page with uri '${paramUri}' does not exists`);
  }

  data = await fetchDefaultPage(uri, lang);

  if (!compareURI(uri, data.page?.uri)) {
    if (import.meta.env.SSR) {
      return Astro.redirect('/404');
    }

    throw new Error(`Page with uri '${paramUri}' does not exists`);
  }
}
---

{isHomepage ? <Homepage data={data} /> : <DefaultPage data={data} />}
