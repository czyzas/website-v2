---
import type { InferGetStaticParamsType } from 'astro';
import { isString } from 'lodash-es';
import { defaultLocale } from '@/i18n/config';
import { getLangParam, getUrlWithoutLang } from '@/i18n/utils';
import {
  fetchInsightsPagesStaticPaths,
  fetchInsightsSingle,
} from '@/lib/fetchCMSData';
import {
  cleanURI,
  compareURI,
  prefixURI,
  unprefixURI,
} from '@/scripts/utils-uri';
import { initializeStore } from '@/scripts/store';
import { cmsStore } from '@/stores/cmsStore';
import Layout from '@/layouts/Layout.astro';
import Top from '@/components/partials/Top.astro';
import ModulesIncluder from '@/components/ModulesIncluder.astro';
import type { ColumnSizes } from '@/types';
import ArticleBar from '@/components/ArticleBar.astro';
import Container from '@/components/ui/Container.astro';
import Grid from '@/components/ui/Grid.astro';
import Card from '@/components/ui/Card.astro';
import { TRANSLATIONS } from '@/constants';
import WordpressImage from '@/components/WordpressImage.astro';
import { parseTags } from '@/scripts/data-parsers/parseTag';

// TODO: use some kind of reusable function
export const getStaticPaths = async () => {
  const finalPaths = [];

  const paths = await fetchInsightsPagesStaticPaths();
  for (const staticPath of paths) {
    if (!staticPath?.languageCode || !staticPath?.uri) {
      continue;
    }

    const paramPath = getUrlWithoutLang(staticPath.uri);

    finalPaths.push({
      params: {
        lang: getLangParam(staticPath.languageCode),
        insights_single: unprefixURI(paramPath, 'insights'),
      },
    });
  }

  return finalPaths;
};

const { insights_single: unprefixedURI, lang: paramLang = defaultLocale } =
  Astro.params as InferGetStaticParamsType<typeof getStaticPaths>;

const lang = isString(paramLang) ? paramLang : defaultLocale;
const rawUri = prefixURI(unprefixedURI, 'insights');
const uri = cleanURI(rawUri, lang);

// TODO: use some kind of reusable function
if (!uri) {
  if (import.meta.env.SSR) {
    return Astro.redirect('/404');
  }

  throw new Error(`Page with uri '${rawUri}' does not exists`);
}

const data = await fetchInsightsSingle(uri, lang);

// TODO: use some kind of reusable function
if (!compareURI(uri, data.page?.uri)) {
  if (import.meta.env.SSR) {
    return Astro.redirect('/404');
  }

  throw new Error(`Page with uri '${rawUri}' does not exists`);
}

const page = data.page!;

initializeStore(cmsStore, {
  primaryMenu: data.primaryMenu!,
  themeOptions: data.themeOptions!,
  subpageSettings: data.page?.subpageSettings,
});

const { subpageSettings } = page;

const pageTitle = page?.title ?? '';
const title = subpageSettings?.customTitle || pageTitle || '';
const image = subpageSettings?.image;
const size = subpageSettings?.topDistribution ?? '5-7';
const acf = page.insightsSingleAcf;
const author =
  acf?.author?.node.__typename === 'PostAuthor' ? acf.author.node : undefined;
const category = page.insightsCategories?.nodes?.[0]?.name;
const lastUpdated = page.modified
  ? new Date(page.modified).toLocaleDateString(lang === 'en' ? 'en-UK' : lang, {
      day: '2-digit',
      month: 'long',
      year: 'numeric',
    })
  : undefined;

const tags = parseTags(page.insightsTags?.nodes);
---

<Layout name="insights" pageTitle={pageTitle}>
  <Top
    title={title}
    titleSize="h2"
    image={image}
    size={size as ColumnSizes}
    class="py-8 md:pt-18 md:pb-14"
  >
    <ArticleBar
      details={{
        Category: category,
        'Last updated': lastUpdated,
      }}
      tags={tags}
      sharing
      class="mt-8 md:mt-12"
    />
  </Top>

  <Container>
    <Grid>
      <div class="col-span-full md:col-start-2 md:col-end-9 order-2 md:order-1">
        <ModulesIncluder data={page?.modules} />
      </div>
      <aside
        class="col-span-full md:col-start-10 md:col-end-13 order-1 md:order-2 flex flex-col gap-4 md:gap-6"
      >
        {
          !!author && (
            <Card class="py-4 flex flex-col gap-3">
              <span class="typography-small-box-title uppercase text-sw-sky-400">
                {TRANSLATIONS.AUTHOR}
              </span>
              <div class="flex items-center gap-3.5">
                <WordpressImage
                  data={author.authorAcf?.image}
                  class="size-12 rounded-full object-cover"
                />
                <div class="flex flex-col typography-body">
                  <span class="text-black">{author.title}</span>
                  {!!author.authorAcf?.occupation && (
                    <span>{author.authorAcf.occupation}</span>
                  )}
                </div>
              </div>
            </Card>
          )
        }
      </aside>
    </Grid>
  </Container>
</Layout>
